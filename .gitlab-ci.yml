stages:
- change_log
- compile_project
- migrate_database
- test_project
- make_documentation
- prepair_for_build
- build
- deploy_to_servers

variables:
  GIT_SSL_NO_VERIFY: "true"
  RANCHER_DEV_URL: "http://10.141.11.53:8080"
  RANCHER_PROD_URL: "http://10.120.12.41:8080"
  HTTP_PROXY_FOR_PROD: "http://10.120.12.56:3128"
  HTTPS_PROXY_FOR_PROD: "http://10.120.12.56:3128"
  HTTP_PROXY_FOR_DEV: "http://10.141.11.57:3128"
  HTTPS_PROXY_FOR_DEV: "http://10.141.11.57:3128"
  RANCHER_STACK_NAME: "ihub"
  GITLAB_INFRASTRUCTURE_PROJECT_PATH: "integrations/ihub-grid"
  GITLAB_INFRASTRUCTURE_PROJECT_NAME: "ihub-sw-infrastructure"
  GITLAB_PROJECT_PATH: "integrations/ihub-grid"
  GITLAB_PROJECT_NAME: "ihub-sw"
  RANCHER_REST_WRAPPER_IMAGE: $CI_REGISTRY/integrations/ihub-grid/rancher-rest-wrapper:master
  CONTAINER_POSTGRES_IMAGE: $CI_REGISTRY/$GITLAB_INFRASTRUCTURE_PROJECT_PATH/$GITLAB_INFRASTRUCTURE_PROJECT_NAME:postgres
  CONTAINER_PHP_FPM_IMAGE_MASTER: $CI_REGISTRY/$GITLAB_INFRASTRUCTURE_PROJECT_PATH/$GITLAB_INFRASTRUCTURE_PROJECT_NAME:php-supervisor-master
  CONTAINER_PHP_FPM_IMAGE_DEV: $CI_REGISTRY/$GITLAB_INFRASTRUCTURE_PROJECT_PATH/$GITLAB_INFRASTRUCTURE_PROJECT_NAME:php-supervisor-dev
  CONTAINER_CODE_IMAGE: $CI_REGISTRY/$GITLAB_PROJECT_PATH/$GITLAB_PROJECT_NAME:$CI_BUILD_REF_NAME
  NEWRELIC_DEPLOYMENT_API_KEY: "72add31ff74c0f5d4e8fc61ba1c38ac38bdb0e6dc9f226e"
  NEWRELIC_DEPLOYMENT_APP_ID_DEV: "44669872"
  NEWRELIC_DEPLOYMENT_APP_ID_PROD: "42805419"
  NO_PROXY: "gitlab.favorit"

#====================== templates ======================#
.template_dev: &template_dev
  tags:
    - de2gl03d_dind_1
  only:
    - dev
    - /^dev-[0-9]{1,5}$/

.template_prod: &template_prod
  tags:
    - de2gl03p_dind_1
  only:
    - master
    - master-pp
    - /^master-[0-9]{1,5}$/
    - tags

.template_compile: &template_compile
  stage: compile_project
  cache:
    key: $CI_BUILD_REF_NAME
    untracked: true
    paths:
      - ./vendor
  artifacts:
    name: $CI_BUILD_REF_NAME
    paths:
      - ./vendor
      - ./tests
      - ./bootstrap
      - ./storage
    expire_in: 1 hour
  before_script:
    - mkdir ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - git config core.sshCommand "ssh -i ~/.ssh/id_rsa -F /dev/null"
    - echo "$COMPOSER_INSTALL_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa || true

.template_compile_dev: &template_compile_dev
  image: $CONTAINER_PHP_FPM_IMAGE_DEV
  script:
    - export http_proxy=$HTTP_PROXY_FOR_DEV
    - export https_proxy=$HTTPS_PROXY_FOR_DEV
    - cp ./run/dev/composer.json ./composer.json
    - rm -rf composer.lock
    - composer install --no-ansi --no-interaction --no-progress -o -a
    - composer dump-autoload --no-interaction -o -a
    - composer show -i

.template_migrate_dev: &template_migrate_dev
  stage: migrate_database
  image: $CONTAINER_PHP_FPM_IMAGE_DEV
  artifacts:
    when: on_failure
    name: $CI_BUILD_REF_NAME
    paths:
      - ./storage/logs
      - ./.env
    expire_in: 1 hour
  before_script:
    - bash ./run/dev/make-configs-for-migrate.sh
  script:
    - php artisan migrate
    - php artisan migrate:status | grep -m1 '| N' && exit 1 || exit 0

.template_migrate_prod: &template_migrate_prod
  stage: migrate_database
  image: $CONTAINER_PHP_FPM_IMAGE_MASTER
  artifacts:
    when: on_failure
    name: $CI_BUILD_REF_NAME
    paths:
      - ./storage/logs
      - ./.env
    expire_in: 1 hour
  before_script:
    - bash ./run/prod/make-configs-for-migrate.sh
  script:
    - php artisan migrate --force
    - php artisan migrate:status | grep -m1 '| N' && exit 1 || exit 0

.template_test: &template_test
  stage: test_project
  image: $CONTAINER_PHP_FPM_IMAGE_DEV
  artifacts:
    when: on_failure
    name: $CI_BUILD_REF_NAME
    paths:
      - ./tests/_output
      - ./storage/logs
      - ./run/
      - ./.env.testing
    expire_in: 1 hour
  script:
    - ./vendor/bin/codecept run api
    - ./vendor/bin/codecept run unit

.template_prepare_before_build: &template_prepare_before_build
  stage: prepair_for_build
  artifacts:
    name: $CI_BUILD_REF_NAME
    paths:
    - ./
    expire_in: 1 hour
  script:
    - rm -rf .gitlab-ci.yml .gitignore .gitattributes composer.lock phpspec.yml phpunit.xml readme.md apidoc.json codeception.yml
    - rm -rf ./tests ./run/dev ./.git
    - chmod -Rf 777 ./storage && chmod -Rf 777 ./bootstrap/cache || true

.template_build_docker_image: &template_build_docker_image
  stage: build
  image: docker:latest
  variables:
    GIT_STRATEGY: none
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN gitlab.favorit:4567
    - docker build -t $CONTAINER_CODE_IMAGE .
    - docker push $CONTAINER_CODE_IMAGE

.template_deploy: &template_deploy
  stage: deploy_to_servers
  image: $RANCHER_REST_WRAPPER_IMAGE
  dependencies: []
  variables:
    GIT_STRATEGY: none

#====================== END templates ======================#

fail_build_for_incorrect_branches:
  stage: compile_project
  variables:
    GIT_STRATEGY: none
  script:
    - echo "======= !!!!! ======= **************** ======= !!!!! ======="
    - echo "======= !!!!! ======= **************** ======= !!!!! ======="
    - echo "======= !!!!! ======= YOU MAKE MISTAKE ======= !!!!! ======="
    - echo "======= !!!!! === READ INFORMATION BELOW! ==== !!!!! ======="
    - echo "\n\n\n"
    - echo ">> Not corrected branch name. You should pass /^[a-zA-Z]{1,6}-[0-9]{1,5}-.*$/ << "
    - echo ">> Your current branch name is ${CI_BUILD_REF_NAME} <<"
    - echo "\n\n\n"
    - echo "======= !!!!! ======= **************** ======= !!!!! ======="
    - echo "======= !!!!! ======= **************** ======= !!!!! ======="
    - exit 1
  only:
    - /^(?![a-zA-Z]{1,6}-[0-9]{1,5}-).*$/
  except:
    - dev
    - /^dev-[0-9]{1,5}$/
    - master
    - master-pp
    - /^master-[0-9]{1,5}$/
    - tags

# ====================================== FEATURE ==================================

compile:feature:
  <<: *template_dev
  <<: *template_compile
  <<: *template_compile_dev
  script:
  - export http_proxy=$HTTP_PROXY_FOR_DEV
  - export https_proxy=$HTTPS_PROXY_FOR_DEV
  - cp ./run/feature/composer.json ./composer.json
  - rm -rf composer.lock
  - composer install --no-ansi --no-interaction --no-progress -o -a
  - composer dump-autoload --no-interaction -o -a
  - composer show -i
  only:
    - /^[a-zA-Z]{1,6}-[0-9]{1,5}-.*$/

cumulative:migrate:feature:
  <<: *template_dev
  <<: *template_migrate_dev
  only:
    - /^[a-zA-Z]{1,6}-[0-9]{1,5}-.*$/

blank_db:migrate:feature:
  <<: *template_dev
  <<: *template_migrate_dev
  services:
  - name: $CONTAINER_POSTGRES_IMAGE
    alias: postgres
  variables:
    POSTGRES_DB: ihub
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: mysecretpassword
  before_script:
    - bash ./run/feature/make-configs-for-migrate-in-CI.sh
  only:
    - /^[a-zA-Z]{1,6}-[0-9]{1,5}-.*$/

mocked:test:feature:
  <<: *template_dev
  <<: *template_test
  before_script:
  - export http_proxy=""
  - export https_proxy=""
  - bash ./run/feature/make-configs-for-tests.sh
  only:
  - /^[a-zA-Z]{1,6}-[0-9]{1,5}-.*$/

e2e:test:feature:
  <<: *template_dev
  <<: *template_test
  allow_failure: true
  before_script:
    - export http_proxy=""
    - export https_proxy=""
    - bash ./run/feature/make-configs-for-tests-mocks-off.sh
  only:
    - /^[a-zA-Z]{1,6}-[0-9]{1,5}-.*$/

rancher:test:feature:
  <<: *template_dev
  <<: *template_test
  allow_failure: true
  before_script:
    - export http_proxy=""
    - export https_proxy=""
    - bash ./run/feature/make-configs-for-tests-rancher.sh
  only:
    - /^[a-zA-Z]{1,6}-[0-9]{1,5}-.*$/

# ====================================== END FEATURE ==============================

# ====================================== DEV ======================================

compile:dev:
  <<: *template_dev
  <<: *template_compile
  <<: *template_compile_dev

migrate:dev:
  <<: *template_dev
  <<: *template_migrate_dev

prepare_for_build_docker_image:dev:
  <<: *template_dev
  <<: *template_prepare_before_build
  image: $CONTAINER_PHP_FPM_IMAGE_DEV
  before_script:
    - sh ./run/dev/make-configs-for-build.sh ${CI_PIPELINE_ID}

docker_image:build:dev:
  <<: *template_dev
  <<: *template_build_docker_image

to_servers:deploy:dev:
  <<: *template_dev
  <<: *template_deploy
  script:
    - export RANCHER_URL=$RANCHER_DEV_URL && export RANCHER_ACCESS_KEY=$RANCHER_DEV_ACCESS_KEY && export RANCHER_SECRET_KEY=$RANCHER_DEV_SECRET_KEY
    - upgrade --environment dev-ihub --stack $RANCHER_STACK_NAME --service webserver --new-sidekicks0-image $CONTAINER_CODE_IMAGE
    - upgrade --environment dev-ihub --stack $RANCHER_STACK_NAME --service php-supervisor --new-sidekicks0-image $CONTAINER_CODE_IMAGE
    - export http_proxy=$HTTP_PROXY_FOR_DEV
    - export https_proxy=$HTTPS_PROXY_FOR_DEV
    - >-
      curl -sS -X POST "https://api.newrelic.com/v2/applications/${NEWRELIC_DEPLOYMENT_APP_ID_DEV}/deployments.json"
      -H "X-Api-Key:${NEWRELIC_DEPLOYMENT_API_KEY}"
      -H 'Content-Type: application/json'
      -d
      "{
      \"deployment\": {
      \"revision\": \"${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}-${CI_PIPELINE_ID}\",
      \"changelog\": \"\",
      \"description\": \"https://gitlab.favorit/$GITLAB_PROJECT_PATH/$GITLAB_PROJECT_NAME/pipelines/${CI_PIPELINE_ID}\",
      \"user\": \"${GITLAB_USER_EMAIL}\"
      }
      }" | jq
  except:
    - /^dev-[0-9]{1,5}$/

# ====================================== END DEV ===================================

# ====================================== PROD ======================================

change_log:master:
  <<: *template_prod
  stage: change_log
  script:
    - export http_proxy=$HTTP_PROXY_FOR_PROD
    - export https_proxy=$HTTPS_PROXY_FOR_PROD
    - apk add --update git
    - git log --oneline $(git for-each-ref --sort=taggerdate --format '%(tag)' | tail -1)..HEAD | grep ".* Merge branch '[a-zA-Z]\{1,6\}-[0-9]\{1,4\}-.*' into 'master'" || true
  only:
    - master
    - master-pp
    - /^master-[0-9]{1,5}$/

change_log:tag:
  <<: *template_prod
  stage: change_log
  script:
    - export http_proxy=$HTTP_PROXY_FOR_PROD
    - export https_proxy=$HTTPS_PROXY_FOR_PROD
    - apk add --update git
    - git log --oneline $(git for-each-ref --sort=taggerdate --format '%(tag)' | tail -2 | head -n 1)..$(git for-each-ref --sort=taggerdate --format '%(tag)' | tail -1) | grep ".* Merge branch '[a-zA-Z]\{1,6\}-[0-9]\{1,4\}-.*' into 'master'" || true
  only:
    - tags

compile:prod:
  <<: *template_prod
  <<: *template_compile
  image: $CONTAINER_PHP_FPM_IMAGE_MASTER
  script:
    - export http_proxy=$HTTP_PROXY_FOR_PROD
    - export https_proxy=$HTTPS_PROXY_FOR_PROD
    - cp ./run/prod/composer.json ./composer.json
    - rm -rf composer.lock
    - composer install --no-ansi --no-interaction --no-progress -o -a
    - composer dump-autoload --no-interaction -o -a
    - composer show -i
    - mkdir -p ./storage/app/
    - git describe --tags $(git rev-list --tags --max-count=1)  > ./storage/app/version.txt

cumulative:migrate:manual:prod:
  <<: *template_prod
  <<: *template_migrate_prod
  only:
    - master
    - master-pp
    - /^master-[0-9]{1,5}$/
    - tags
  except:
    - /^v[0-9]{2}.[0-9]{2}.[0-9]{1,5}.[0-9]{1,3}-external-partners*$/
  when: manual

blank_db:migrate:prod:
  <<: *template_prod
  <<: *template_migrate_prod
  services:
  - name: $CONTAINER_POSTGRES_IMAGE
    alias: postgres
  variables:
    POSTGRES_DB: ihub
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: mysecretpassword
  before_script:
    - bash ./run/prod/decode.sh
    - bash ./run/prod/make-configs.sh ${CI_PIPELINE_ID}
    - bash ./run/prod/make-configs-for-migrate-in-CI.sh

mocked:on_dev_configs:test:prod:
  <<: *template_dev
  <<: *template_test
  image: $CONTAINER_PHP_FPM_IMAGE_MASTER
  allow_failure: true
  before_script:
    - export http_proxy=""
    - export https_proxy=""
    - bash ./run/prod/make-configs-for-tests.sh
  only:
    - master
    - master-pp
    - /^master-[0-9]{1,5}$/
    - tags

e2e:on_dev_configs:test:prod:
  <<: *template_dev
  <<: *template_test
  image: $CONTAINER_PHP_FPM_IMAGE_MASTER
  allow_failure: true
  before_script:
    - export http_proxy=$HTTP_PROXY_FOR_PROD
    - export https_proxy=$HTTPS_PROXY_FOR_PROD
    - bash ./run/prod/make-configs-for-tests-mocks-off.sh
  only:
    - master
    - master-pp
    - /^master-[0-9]{1,5}$/
    - tags

prepare_for_build_docker_image:prod:
  <<: *template_prod
  <<: *template_prepare_before_build
  image: $CONTAINER_PHP_FPM_IMAGE_MASTER
  before_script:
  - bash ./run/prod/decode.sh
  - bash ./run/prod/make-configs.sh ${CI_PIPELINE_ID}
  except:
  - /^v[0-9]{2}.[0-9]{2}.[0-9]{1,5}.[0-9]{1,3}-external-partners*$/

build_docker_image:prod:
  <<: *template_prod
  <<: *template_build_docker_image
  except:
    - /^v[0-9]{2}.[0-9]{2}.[0-9]{1,5}.[0-9]{1,3}-external-partners*$/

10_cron_servers:deploy:manual:prod:
  <<: *template_prod
  <<: *template_deploy
  script:
    - export RANCHER_URL=$RANCHER_PROD_URL && export RANCHER_ACCESS_KEY=$RANCHER_PROD_ACCESS_KEY && export RANCHER_SECRET_KEY=$RANCHER_PROD_SECRET_KEY
    - upgrade --environment ihub --stack $RANCHER_STACK_NAME --service php-supervisor --new-sidekicks0-image $CONTAINER_CODE_IMAGE
  when: manual
  except:
    - /^v[0-9]{2}.[0-9]{2}.[0-9]{1,5}.[0-9]{1,3}-external-partners*$/

20_all_servers:deploy:manual:prod:
  <<: *template_prod
  <<: *template_deploy
  script:
    - export RANCHER_URL=$RANCHER_PROD_URL && export RANCHER_ACCESS_KEY=$RANCHER_PROD_ACCESS_KEY && export RANCHER_SECRET_KEY=$RANCHER_PROD_SECRET_KEY
    - upgrade --environment ihub --stack $RANCHER_STACK_NAME --service webserver --new-sidekicks0-image $CONTAINER_CODE_IMAGE
    - export http_proxy=$HTTP_PROXY_FOR_PROD
    - export https_proxy=$HTTPS_PROXY_FOR_PROD
    - >-
      curl -sS -X POST "https://api.newrelic.com/v2/applications/${NEWRELIC_DEPLOYMENT_APP_ID_PROD}/deployments.json"
      -H "X-Api-Key:${NEWRELIC_DEPLOYMENT_API_KEY}"
      -H 'Content-Type: application/json'
      -d
      "{
      \"deployment\": {
      \"revision\": \"${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}-${CI_PIPELINE_ID}\",
      \"changelog\": \"\",
      \"description\": \"https://gitlab.favorit/$GITLAB_PROJECT_PATH/$GITLAB_PROJECT_NAME/pipelines/${CI_PIPELINE_ID}\",
      \"user\": \"${GITLAB_USER_EMAIL}\"
      }
      }" | jq
    - upgrade --environment ihub --stack $RANCHER_STACK_NAME --service webserver-system --new-sidekicks0-image $CONTAINER_CODE_IMAGE
    - upgrade --environment ihub --stack $RANCHER_STACK_NAME --service php-supervisor --new-sidekicks0-image $CONTAINER_CODE_IMAGE
  only:
    - tags
  when: manual
  except:
    - /^v[0-9]{2}.[0-9]{2}.[0-9]{1,5}.[0-9]{1,3}-external-partners*$/

# ====================================== END PROD ==================================

prepare_for_send_to_obs:
  <<: *template_prepare_before_build
  image: $CONTAINER_PHP_FPM_IMAGE_MASTER
  after_script:
    - php artisan config:clear
    - php artisan route:clear
  only:
  - /^v[0-9]{2}.[0-9]{2}.[0-9]{1,5}.[0-9]{1,3}-external-partners*$/

send_to_obs:
  stage: build
  tags:
   - obs-gitlab
  allow_failure: true
  script:
    - export REPO=$CI_PROJECT_PATH.git && export BRANCH=$CI_BUILD_REF_NAME && export CI_BUILD_DIR=$CI_PROJECT_DIR && export TAG_VERSION=$CI_BUILD_TAG
    - cd ~ && "./obs-wrapper"
  only:
    - /^v[0-9]{2}.[0-9]{2}.[0-9]{1,5}.[0-9]{1,3}-external-partners*$/
  when: manual
